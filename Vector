//1 задание
#include <iostream>
#include <vector>
#include <unordered_set>

std::vector<int> uniqueElements(const std::vector<int>& arr) {
  std::unordered_set<int> seen;
  std::vector<int> result;
  for (int item : arr) {
    if (seen.find(item) == seen.end()) {
      seen.insert(item);
      result.push_back(item);
    }
  }
  return result;
}

int main() {
  std::vector<int> myArray = {1, 3, 2, 2, 4, 4, 5};
  std::vector<int> uniqueArray = uniqueElements(myArray);
  for (int item : uniqueArray) {
    std::cout << item << " ";
  }
  std::cout << std::endl; 
  return 0;
}

//2 задание 
#include <iostream>
#include <vector>
#include <limits> // для numeric_limits

std::pair<int, std::vector<int>> maxSubarraySum(const std::vector<int>& arr) {
    int maxSoFar = std::numeric_limits<int>::min();
    int maxEndingHere = 0;
    int startIndex = 0;
    int endIndex = 0;
    int j = 0;

    for (int i = 0; i < arr.size(); ++i) {
        maxEndingHere += arr[i];

        if (maxSoFar < maxEndingHere) {
            maxSoFar = maxEndingHere;
            startIndex = j;
            endIndex = i;
        }

        if (maxEndingHere < 0) {
            maxEndingHere = 0;
            j = i + 1;
        }
    }
    std::vector<int> subarray(arr.begin() + startIndex, arr.begin() + endIndex + 1);
    return std::make_pair(maxSoFar, subarray);
}

int main() {
    std::vector<int> arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    auto result = maxSubarraySum(arr);
    std::cout << "Максимальная сумма: " << result.first << std::endl; // Вывод: 6
    std::cout << "Подмассив: ";
    for (int x : result.second) std::cout << x << " ";
    std::cout << std::endl; // Вывод: 4 -1 2 1

    return 0;
}

//3 задание
#include <iostream>
#include <vector>
#include <limits>

std::pair<int, std::vector<int>> maxSubarraySumSlow(const std::vector<int>& arr) {
    int maxSum = std::numeric_limits<int>::min();
    int startIndex = 0;
    int endIndex = 0;
    std::vector<int> maxSubarray;

    for (int i = 0; i < arr.size(); ++i) {
        int currentSum = 0;
        for (int j = i; j < arr.size(); ++j) {
            currentSum += arr[j];
            if (currentSum > maxSum) {
                maxSum = currentSum;
                startIndex = i;
                endIndex = j;
            }
        }
    }
    if (startIndex <= endIndex) {
        maxSubarray.assign(arr.begin() + startIndex, arr.begin() + endIndex + 1);
    }
    return std::make_pair(maxSum, maxSubarray);
}

int main() {
    std::vector<int> arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    auto result = maxSubarraySumSlow(arr);
    std::cout << "Максимальная сумма (медленный метод): " << result.first << std::endl; // Вывод: 6
    std::cout << "Подмассив: ";
    for (int x : result.second) std::cout << x << " ";
    std::cout << std::endl; // Вывод: 4 -1 2 1
    return 0;
}

//4 задание 
#include <iostream>
#include <vector>
#include <algorithm>

void rearrangeArrayPartition(std::vector<int>& arr) {
    std::partition(arr.begin(), arr.end(), [](int x){ return x % 2 == 0; });
}

int main() {
    std::vector<int> arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    rearrangeArrayPartition(arr);
    std::cout << "Переставленный массив (partition): ";
    for (int x : arr) {
        std::cout << x << " ";
    }
    std::cout << std::endl; // Вывод: 2 4 6 8 1 3 5 7 9
    return 0;
}
